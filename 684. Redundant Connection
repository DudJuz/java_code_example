class Solution {
    class Union{
        int[] parent;
        public Union(int size){
            this.parent = new int[size+1];
            for(int i = 0; i < size+1 ; i ++) parent[i] = i;
        }
        public int find(int x){
            if(x!=parent[x]){
                parent[x] = find(parent[x]);
            }
            return parent[x];
        }
        public boolean union(int x , int y ){
            int px = find(x);
            int py = find(y);
            if(px!=py)parent[px] = py;
            else return false;
            return true;
        }
        
    }
    public int[] findRedundantConnection(int[][] edges) {
        int len = edges.length;
        Union u = new Union(len);
        for(int[] edge: edges){
           if(!u.union(edge[0],edge[1])) return edge;
        }
        return new int[0];
    }
}

class Solution {
    public int[] nextGreaterElements(int[] nums) {
        
        
//         int[] ans = new int[nums.length];
//         Arrays.fill(ans,-1);
//         Stack<Integer> stack = new Stack<>();
//         for(int j = 0 ; j < 2*nums.length; j++){
//             int i = j%nums.length;
//             while(!stack.isEmpty() && nums[stack.peek()] < nums[i] ){
//                if(stack.peek()<nums.length) ans[stack.pop()] = nums[i];
//                 else stack.pop();
//             }
//             stack.add(i);
//         }
        
//          return ans;
        
        
        
        int[] res = new int[nums.length];
        int[] doublenums = new int[nums.length * 2];
        System.arraycopy(nums, 0, doublenums, 0, nums.length);
        System.arraycopy(nums, 0, doublenums, nums.length, nums.length);
        for (int i = 0; i < nums.length; i++) {
            res[i]=-1;
            for (int j = i + 1; j < doublenums.length; j++) {
                if (doublenums[j] > doublenums[i]) {
                    res[i] = doublenums[j];
                    break;
                }
            }
        }
        return res;
    

      // PriorityQueue<Integer> pq = new PriorityQueue<>();
      // for( int a : nums){
      //     if(!pq.contains(a)) pq.add(a);
      // }
      // Map<Integer,Integer> map = new HashMap<>();
      // while(pq.size()!= 0){
      //    int b = pq.poll();
      //    if(pq.peek()!=null){
      //        map.put(b,pq.peek());
      //    } 
      //   else map.put(b,-1);
      // }
      // for(int i = 0;i<nums.length;i++){
      //    nums[i] = map.get(nums[i]);
      // }
      // return nums; 
    }
}

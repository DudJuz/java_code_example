class Solution {
    public String shortestCommonSupersequence(String str1, String str2) {
        int l1 = str1.length();
        int l2 = str2.length();
        //remove exception
        if(l1<0) return str2;
        if(l2<0) return str1;

        char[] c1 = str1.toCharArray();
        char[] c2 = str2.toCharArray();

        int[][] record = new int[l1][l2];
        int[][] check  = new int[l1][l2];
        int max = -1,row=-1,col=-1;
        int x=0,y=0;
        for(int i = 0; i<l1; i++){
            for(int j = 0; j<l2; j++){
                if(c1[i]==c2[j]) {check[i][j] = 1;record[i][j] = 1;if(max<1){max=1;x=i;y=j;} }
                //System.out.print(check[i][j]);
                if(i==l1-1&&record[i][j]==1)row = j;
                if(j==l2-1&&record[i][j]==1)col = i;
            }
            //System.out.println(" ");
        }
        //System.out.println(" ");
        if(col>0)for(int i = col; i>=0; i--){record[i][l2-1] = 1;}
        if(row>0)for(int j = row; j>=0; j--){record[l1-1][j] = 1;}    
       
        for(int i = l1-2; i>=0; i--){
            for(int j = l2-2; j>=0; j--){
                //ignore 0
                if(record[i][j]==0){record[i][j] = record[i+1][j+1]; continue;}
                if(check[i+1][j+1]!=0) record[i][j] =  record[i+1][j+1]+1;
                else{
                     //record[i][j] = Math.max(record[i+1][j],record[i][j+1]);  
                     record[i][j] = get(i+1,j+1,record);
                }
                //update start position
                if(max<=record[i][j]){max=record[i][j];x=i;y=j;}
            }
        }  
       //print
        for(int i = 0; i<l1; i++){
            for(int j = 0; j<l2; j++){

                //System.out.print(record[i][j]);
            }
            //System.out.println(" ");
        }
        
        int duplicate =0;
        StringBuilder sb = new StringBuilder();
       //find start 
        int i =x,j=y;
        fill(sb,c1,c2,0,0,x,y);
    
        duplicate = record[i][j];
        //System.out.println("dup "+duplicate+ " Actural min len "+ (l1+l2-duplicate));
        boolean c = false,r = false;
        while(i<l1&&j<l2){
             //System.out.println(i+" "+j+" "+duplicate+" "+sb.toString());
            if(i<l1-1&&j<l2-1){
                if(record[i][j] == duplicate && check[i][j] == 1){sb.append(c1[i]);i++; j++;duplicate--; }
                else if(i<l1-1&&j<l2-1){
                    int[] index = findnext(i,j,check,record,duplicate);
                    x = index[0];
                    y = index[1];
                    fill(sb,c1,c2,i,j,x,y);
                    i=x;
                    j=y;
                    //System.out.println(x+" "+y);
                }
            }
            else if(i<l1-1&&j==l2-1){
                sb.append(c1[i]);
                if(record[i][j]==1)c = true;
                i++;
            }
            else if(i==l1-1&&j<l2-1){
                sb.append(c2[j]);
                if(record[i][j]==1)r = true;
                j++;
            }
            else{
                if(c)sb.append(c1[l1-1]);
                else if(r)sb.append(c2[l2-1]);
                else if(record[l1-1][l2-1]==1)sb.append(c1[l1-1]);
                else {sb.append(c1[l1-1]); sb.append(c2[l2-1]);}
                break;
            }
        }        
        //System.out.println("len "+sb.length());
        return sb.toString();
    }
    public int[] findnext(int a, int b, int[][] check, int[][] record,int duplicate){
        int [] ans = new int[2];
        if(a==record.length-1||b==record[0].length-1) {ans[0] = a; ans[1] = b;return ans;}
        if(record[a][b]==duplicate&&check[a][b]!=0)  {ans[0] = a; ans[1] = b;return ans;}
        for(int i =a; i < record.length; i++){
            if(record[i][b]==duplicate) {
                if(check[i][b]==1){ans[0] = i; ans[1] = b;return ans;}
                else{return ans = findnext(a+1,b+1,check,record,duplicate);}
            }
            
        }
        for(int j =b; j < record[0].length; j++){
            if(record[a][j]==duplicate) {
                if(check[a][j]==1){ans[0] = a; ans[1] = j;return ans;}
                else{return ans = findnext(a+1,b+1,check,record,duplicate);}
            }
        }
        return ans;
    }
    public void fill(StringBuilder sb,char[] c1, char[] c2, int i , int j , int x ,int y ){
        for(i=i; i<x; i++){
           sb.append(c1[i]);
        }
        for(j=j ; j<y; j++){
            sb.append(c2[j]);
        }  
    }
    public int get(int a, int b , int[][] record){
        int max = 1;
        for(int i =a; i < record.length; i++){
            if(record[i][b]!=0) max = Math.max(max,record[i][b]+1);
        }
        for(int j =b; j < record[0].length; j++){
            if(record[a][j]!=0) max = Math.max(max,record[a][j]+1);
        }
        return max;
    }
}

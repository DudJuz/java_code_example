class Solution {

    public int[] smallestSufficientTeam(String[] req_skills, List<List<String>> people) {
        int snum = req_skills.length;
        int size = 1<<snum;
        List<Integer>[] path = new List[size];
        path[0] = new ArrayList<>();
        
        // build map: skill --> bit postion
        Map<String, Integer> skillsMap = new HashMap<String, Integer>();
        for (int i = 0; i < req_skills.length; i++) skillsMap.put(req_skills[i], i); 
        
        //tansform the skills of the people to bit representation
        int t = 0;
        for(List<String> p : people){
            //cur : current person overall skills
            int cur = 0;
            for(String s : p){
                cur |= 1 << skillsMap.get(s);
            }
            if(cur==0){t++;continue;}
            
            //check all possible skill combination
            for(int j = 0; j<size; j++){         
                
                    int comb_id = j|cur;
                    // if no new comb or j is not a comb, jump
                    if(comb_id == j||path[j]==null) continue;
                    
                    List<Integer> candidate = new ArrayList(path[j]);
                    if(path[comb_id]==null||path[comb_id].size()> candidate.size()){
                         candidate.add(t);
                         path[comb_id] =  candidate;                       
                    } 
             }
            t++;
        }
        
        // build the result
        int[ ] res = new int[path[size-1].size()];
        t=0;
        for(int z : path[size-1]){
            res[t] = z;
            t++;
        }
        // return path[size-1].stream().mapToInt(Integer::intValue).toArray();
        // return path[size-1].stream().mapToInt(x->x.intValue()).toArray();
        //return path[size-1].stream().mapToInt(x->x).toArray();
        return res;
    }
}
